AWSTemplateFormatVersion: 2010-09-09

Parameters:
  #BucketArn:
  #  Type: String
    
  BucketName:
    Type: String
  
  #Collection:
  #  Type: String
    
  CollectionEndpoint:
    Type: String
  
  #KinesisFirehoseDeliveryStreamName:
  #  Type: String
  
  KinesisOpenSearchServerlessDestinationRoleArn:
    Type: String

  #NamePrefix:
  #  Type: String
  #  Default: SAMPLE_APP
  
  OpenSearchIndexName:
    Type: String
  
  Prefix:
    Type: String
    
  ShardCount:
    Type: Number
    

Resources:
  KinesisDataStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub "${Prefix}-DataStream"
      RetentionPeriodHours: 24
      ShardCount: !Ref ShardCount
      #StreamEncryption: 
      #  StreamEncryption
      #StreamModeDetails: 
      #  StreamMode: ON_DEMAND
      #Tags: 
      #  - Tag
      
  #DataAccessPolicy3:
  #  Type: AWS::OpenSearchServerless::AccessPolicy
  #  #DependsOn:
  #  #  - Function2
  #  Properties:
  #    #Description: String
  #    Name: !Sub "${Prefix}-data-policy-02"
  #    Policy: !Sub
  #      - >-
  #        [{"Description":"Access for Kinesis Firehose","Rules":[{"ResourceType":"index","Resource":["index/${Collection}/${OpenSearchIndexName}"],"Permission":["aoss:WriteDocument","aoss:UpdateIndex"]}],
  #        "Principal":["${KinesisOpenSearchServerlessDestinationRoleArn}"]}]
  #      - KinesisOpenSearchServerlessDestinationRoleArn: !GetAtt KinesisOpenSearchServerlessDestinationRole.Arn
  #    Type: data
      
  KinesisFirehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      AmazonOpenSearchServerlessDestinationConfiguration: 
        #BufferingHints: 
        #  AmazonOpenSearchServerlessBufferingHints
        CloudWatchLoggingOptions: 
          Enabled: true
          LogGroupName: !Ref LogGroup
          LogStreamName: !Ref LogStream
        CollectionEndpoint: !Ref CollectionEndpoint
        IndexName: !Ref OpenSearchIndexName
        #ProcessingConfiguration: 
        #  ProcessingConfiguration
        #RetryOptions: 
        #  AmazonOpenSearchServerlessRetryOptions
        #RoleARN: !GetAtt KinesisOpenSearchServerlessDestinationRole.Arn
        RoleARN: !Ref KinesisOpenSearchServerlessDestinationRoleArn
        S3BackupMode: FailedDocumentsOnly
        S3Configuration: 
          BucketARN: !Sub "arn:aws:s3:::${BucketName}"
          #BufferingHints: 
          #  BufferingHints
          #CloudWatchLoggingOptions: 
          #  CloudWatchLoggingOptions
          CompressionFormat: GZIP
          #EncryptionConfiguration: 
          #  EncryptionConfiguration
          #ErrorOutputPrefix: String
          Prefix: firehose/
          RoleARN: !GetAtt KinesisS3DestinationRole.Arn
        #VpcConfiguration: 
        #  VpcConfiguration
      #AmazonopensearchserviceDestinationConfiguration: 
      #  AmazonopensearchserviceDestinationConfiguration
      #DeliveryStreamEncryptionConfigurationInput: 
      #  DeliveryStreamEncryptionConfigurationInput
      #DeliveryStreamName: !Sub "${Prefix}-FirehoseDeliveryStream"
      #DeliveryStreamName: !Ref KinesisFirehoseDeliveryStreamName
      DeliveryStreamName: !Sub "${Prefix}-DeliveryStream"
      DeliveryStreamType: KinesisStreamAsSource
      #ElasticsearchDestinationConfiguration: 
      #  ElasticsearchDestinationConfiguration
      #ExtendedS3DestinationConfiguration: 
      #  ExtendedS3DestinationConfiguration
      #HttpEndpointDestinationConfiguration: 
      #  HttpEndpointDestinationConfiguration
      KinesisStreamSourceConfiguration: 
        KinesisStreamARN: !GetAtt KinesisDataStream.Arn
        RoleARN: !GetAtt KinesisStreamSourceRole.Arn
      #RedshiftDestinationConfiguration: 
      #  RedshiftDestinationConfiguration
      #S3DestinationConfiguration: 
      #  BucketARN: !Ref BucketArn
      #  #BucketARN: !Sub "arn:aws:s3:::${BucketName}"
      #  #BufferingHints: 
      #  #  IntervalInSeconds: 60
      #  #  SizeInMBs: 50
      #  CloudWatchLoggingOptions: 
      #    Enabled: true
      #    LogGroupName: !Ref LogGroup
      #    LogStreamName: !Ref LogStream
      #  CompressionFormat: UNCOMPRESSED
      #  #EncryptionConfiguration: 
      #  #  EncryptionConfiguration
      #  #ErrorOutputPrefix: String
      #  Prefix: firehose/
      #  RoleARN: !GetAtt KinesisS3DestinationRole.Arn
      #SplunkDestinationConfiguration: 
      #  SplunkDestinationConfiguration
      #Tags: 
      #  - Tag
        
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub "${Prefix}-KinesisFirehoseDeliveryStream"
     
  LogStream:
    Type: AWS::Logs::LogStream
    Properties: 
      LogGroupName: !Ref LogGroup
      LogStreamName: test-stream
        
  KinesisStreamSourceRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                #- lambda.amazonaws.com
                - firehose.amazonaws.com
      #ManagedPolicyArns:
      #  - arn:aws:iam::aws:policy/AmazonKinesisFullAccess
      #RoleName: DataSourceLambdaRole
      Policies:
        - PolicyName: KinesisStreamSourcePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:GetShardIterator
                  - kinesis:GetRecords
                  - kinesis:ListShards
                Resource:
                  - !GetAtt KinesisDataStream.Arn
              #- Effect: Allow
              #  Action:
              #    - firehose:DeleteDeliveryStream
              #    - firehose:PutRecord
              #    - firehose:PutRecordBatch
              #    - firehose:UpdateDestination
              #  Resource:
              #    #- !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${UrlsParameter}"
              #    #- !GetAtt KinesisDataStream.Arn
              #    - !Sub "arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/${KinesisFirehoseDeliveryStreamName}"
              #- Effect: Allow
              #  Action:
              #    - s3:PutObject
              #  Resource:
              #    - !Sub "arn:aws:s3:::${CodeS3Bucket}/*"
              
  #KinesisOpenSearchServerlessDestinationRole:
  #  Type: AWS::IAM::Role
  #  DeletionPolicy: Delete
  #  Properties:
  #    AssumeRolePolicyDocument:
  #      Version: "2012-10-17"
  #      Statement:
  #        - Effect: Allow
  #          Action: sts:AssumeRole
  #          Principal:
  #            Service:
  #              - firehose.amazonaws.com
  #    Policies:
  #      - PolicyName: KinesisOpenSearchServerlessDestinationRolePolicy
  #        PolicyDocument:
  #          Version: 2012-10-17
  #          Statement:
  #            - Effect: Allow
  #              Action:
  #                #- aoss:*
  #                - aoss:APIAccessAll
  #                #- aoss:BatchGetCollection
  #                #- aoss:APIAccessAll
  #              Resource:
  #                - !Sub "arn:aws:aoss:${AWS::Region}:${AWS::AccountId}:collection/${Collection}"
  
  KinesisS3DestinationRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                #- lambda.amazonaws.com
                - firehose.amazonaws.com
      #ManagedPolicyArns:
      #  - arn:aws:iam::aws:policy/AmazonKinesisFullAccess
      #  - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: KinesisS3DestinationPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${BucketName}"
                  - !Sub "arn:aws:s3:::${BucketName}/*"
                  #- !Ref BucketArn
                  #- !Sub "${BucketArn}/*"
              #- Effect: Allow
              #  Action:
              #    - kinesis:DescribeStream
              #    - kinesis:GetShardIterator
              #    - kinesis:GetRecords
              #    - kinesis:ListShards
              #    #- kinesis:*
              #  Resource:
              #    - !GetAtt KinesisDataStream.Arn
              #- Effect: Allow
              #  Action:
              #    - logs:PutLogEvents
              #  Resource:
              #    - !GetAtt LogGroup.Arn
      
  #KinesisDataAnalytics:
  #  Type: AWS::KinesisAnalytics::Application
  #  Properties: 
  #    ApplicationName: !Sub ${Prefix}-application
  #    ApplicationDescription: sample application.
  #    ApplicationCode:
  #      !Sub |
  #        CREATE OR REPLACE STREAM "DESTINATION_SQL_STREAM" (event_time VARCHAR(20), ticker VARCHAR(5), price REAL);
  #        CREATE OR REPLACE PUMP "STREAM_PUMP" AS INSERT INTO "DESTINATION_SQL_STREAM"
  #        SELECT STREAM event_time, ticker, price
  #        FROM "${NamePrefix}_001"
  #        WHERE ticker = 'AAPL';
  #    Inputs:
  #      - NamePrefix: !Ref NamePrefix
  #        InputSchema:
  #          RecordColumns:
  #            - Name: EVENT_TIME
  #              SqlType: VARCHAR(20)
  #              Mapping: $.EVENT_TIME
  #            - Name: TICKER
  #              SqlType: VARCHAR(5)
  #              Mapping: $.TICKER
  #            - Name: PRICE
  #              SqlType: REAL
  #              Mapping: $.PRICE
  #          RecordFormat:
  #            RecordFormatType: JSON
  #            MappingParameters:
  #              JSONMappingParameters:
  #                RecordRowPath: $
  #        KinesisStreamsInput:
  #          ResourceARN: !GetAtt KinesisDataStream.Arn
  #          RoleARN: !GetAtt KinesisAnalyticsRole.Arn
  #      
  #      
  #KinesisAnalyticsRole:
  #  Type: AWS::IAM::Role
  #  Properties:
  #    AssumeRolePolicyDocument:
  #      Version: 2012-10-17
  #      Statement:
  #        - Effect: Allow
  #          Principal:
  #            Service: kinesisanalytics.amazonaws.com
  #          Action: sts:AssumeRole
  #    #Path: /
  #    Policies:
  #      - PolicyName: ReadInputKinesisDataStream
  #        PolicyDocument:
  #          Version: 2012-10-17
  #          Statement:
  #            - Effect: Allow
  #              Action:
  #                - kinesis:DescribeStream
  #                - kinesis:GetShardIterator
  #                - kinesis:GetRecords
  #                - kinesis:ListShards
  #              Resource:
  #                - !GetAtt KinesisDataStream.Arn


Outputs:
  KinesisDataStreamName:
    Value: !Ref KinesisDataStream
      
  #KinesisDataStreamArn:
  #  Value: !GetAtt KinesisDataStream.Arn