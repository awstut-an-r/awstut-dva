AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Architecture:
    Type: String
  
  ConfigurationEndPointAddress:
    Type: String

  FunctionSecurityGroup:
    Type: String

  Handler:
    Type: String
    
  LambdaLayer:
    Type: String
    
  LambdaSubnet:
    Type: String

  Prefix:
    Type: String
    
  RedisPort:
    Type: Number

  Runtime:
    Type: String

    
Resources:
  Function:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - !Ref Architecture
      Environment:
        Variables:
          CONFIGURATION_ENDPOINT_ADDRESS: !Ref ConfigurationEndPointAddress
          REDIS_PORT: !Ref RedisPort
      Code:
        ZipFile: |
          import json
          import os
          import redis
          
          configuration_endpoint_address = os.environ['CONFIGURATION_ENDPOINT_ADDRESS']
          redis_port = int(os.environ['REDIS_PORT'])
          
          def lambda_handler(event, context):
            pool = redis.ConnectionPool(
              host=configuration_endpoint_address,
              port=redis_port
              )
            client = redis.StrictRedis(connection_pool=pool)
            
            client.set('hogehoge', 'fugafuga')
            
            return {
              'statusCode': 200,
              'body': json.dumps(
                {
                  'redis_result': client.get('hogehoge').decode()
                },
                indent=2
                )
            }
      FunctionName: !Sub "${Prefix}-function"
      Handler: !Ref Handler
      Layers:
        - !Ref LambdaLayer
      Runtime: !Ref Runtime
      Role: !GetAtt FunctionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref FunctionSecurityGroup
        SubnetIds:
          - !Ref LambdaSubnet

  FunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn: !GetAtt Function.Arn

  FunctionUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunctionUrl
      FunctionName: !GetAtt Function.Arn
      FunctionUrlAuthType: NONE
      Principal: "*"

  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
