AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  Architecture:
    Type: String

  Handler:
    Type: String
    
  HtmlBucket:
    Type: String
    
  ImageBucket1:
    Type: String
    
  ImageBucket2:
    Type: String
    
  ImageUrl:
    Type: String

  Prefix:
    Type: String
    
  Runtime:
    Type: String


Resources:
  ImageBucketCustomResource1:
    Type: Custom::CustomResource
    Properties:
      BucketName: !Ref ImageBucket1
      ImageUrl: !Ref ImageUrl
      ServiceToken: !GetAtt PutImageFunction.Arn
      
  ImageBucketCustomResource2:
    Type: Custom::CustomResource
    Properties:
      BucketName: !Ref ImageBucket2
      ImageUrl: !Ref ImageUrl
      ServiceToken: !GetAtt PutImageFunction.Arn
  
  PutImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - !Ref Architecture
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import urllib.request
          
          s3_client = boto3.client('s3')
          content_type = 'image/svg+xml'
          
          CREATE = 'Create'
          DELETE = 'Delete'
          response_data = {}
          
          def lambda_handler(event, context):
            try:
              s3_bucket = event['ResourceProperties']['BucketName']
              image_url = event['ResourceProperties']['ImageUrl']
              s3_key = image_url.split('/')[-1]
              
              if event['RequestType'] == CREATE:
                response = urllib.request.urlopen(image_url)
                image_data = response.read()

                response = s3_client.put_object(
                  Bucket=s3_bucket,
                  Key=s3_key,
                  Body=image_data,
                  ContentType=content_type
                  )
                print(response)
              
              elif event['RequestType'] == DELETE:
                list_response = s3_client.list_objects_v2(Bucket=s3_bucket)
                if 'Contents' in list_response and list_response['Contents']:
                  for obj in list_response['Contents']:
                    delete_response = s3_client.delete_object(
                      Bucket=s3_bucket,
                      Key=obj['Key'])
                    print(delete_response)
              
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              
            except Exception as e:
              print(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
      FunctionName: !Sub "${Prefix}-put-image-function"
      Handler: !Ref Handler
      Role: !GetAtt PutImageFunctionRole.Arn
      Runtime: !Ref Runtime

  PutImageFunctionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PutImageFunctionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub "arn:aws:s3:::${ImageBucket1}"
                  - !Sub "arn:aws:s3:::${ImageBucket1}/*"
                  - !Sub "arn:aws:s3:::${ImageBucket2}"
                  - !Sub "arn:aws:s3:::${ImageBucket2}/*"
                  
  PutHtmlCustomResource:
    Type: Custom::CustomResource
    Properties:
      HtmlBucketName: !Ref HtmlBucket
      ImageBucketName1: !Ref ImageBucket1
      ImageBucketName2: !Ref ImageBucket2
      ImageUrl: !Ref ImageUrl
      ServiceToken: !GetAtt PutHtmlFunction.Arn
                  
  PutHtmlFunction:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - !Ref Architecture
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          from string import Template
          
          object_name = 'index.html'
          object_body = Template("""<html>
            <head></head>
            <body>
              <h1>index.html</h1>
              <h2>$html_bucket</h2>

              <h3>$image_bucket1</h3>
              <div id="svg-container1"></div>
              
              <h3>$image_bucket2</h3>
              <div id="svg-container2"></div>
              
              <script>
                const svgContainer1 = document.getElementById('svg-container1');
                fetch('https://$image_bucket1.s3.amazonaws.com/$image_name')
                  .then(response => response.text())
                  .then(svgContent => {
                    svgContainer1.innerHTML = svgContent;
                  })
                  .catch(error => {
                    const errorMessage = document.createElement('p');
                    errorMessage.textContent = 'Error occur during loading svg from $image_bucket1.';
                    svgContainer1.appendChild(errorMessage);
                  });
                  
                const svgContainer2 = document.getElementById('svg-container2');
                fetch('https://$image_bucket2.s3.amazonaws.com/$image_name')
                  .then(response => response.text())
                  .then(svgContent => {
                    svgContainer2.innerHTML = svgContent;
                  })
                  .catch(error => {
                    const errorMessage = document.createElement('p');
                    errorMessage.textContent = 'Error occur during loading svg from $image_bucket2.';
                    svgContainer1.appendChild(errorMessage);
                  });
              </script>
            </body>
          </html>""")
          content_type = 'text/html'
          char_code= 'utf-8'
          
          s3_client = boto3.client('s3')
          
          CREATE = 'Create'
          DELETE = 'Delete'
          response_data = {}
          
          def lambda_handler(event, context):
            try:
              s3_html_bucket = event['ResourceProperties']['HtmlBucketName']
              s3_image_bucket1 = event['ResourceProperties']['ImageBucketName1']
              s3_image_bucket2 = event['ResourceProperties']['ImageBucketName2']
              image_url = event['ResourceProperties']['ImageUrl']
              s3_key = image_url.split('/')[-1]
              
              if event['RequestType'] == CREATE:
                body = object_body.substitute(
                  html_bucket=s3_html_bucket,
                  image_bucket1=s3_image_bucket1,
                  image_bucket2=s3_image_bucket2,
                  image_name=s3_key
                  )

                put_response = s3_client.put_object(
                  Bucket=s3_html_bucket,
                  Key=object_name,
                  Body=body.encode(char_code),
                  ContentEncoding=char_code,
                  ContentType=content_type)
                print(put_response)
              
              elif event['RequestType'] == DELETE:
                list_response = s3_client.list_objects_v2(Bucket=s3_html_bucket)
                print(list_response)
                if 'Contents' in list_response and list_response['Contents']:
                  for obj in list_response['Contents']:
                    delete_response = s3_client.delete_object(
                      Bucket=s3_html_bucket,
                      Key=obj['Key'])
                    print(delete_response)
              
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              
            except Exception as e:
              print(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
      FunctionName: !Sub "${Prefix}-put-html-function"
      Handler: !Ref Handler
      Role: !GetAtt PutHtmlFunctionRole.Arn
      Runtime: !Ref Runtime
      
  PutHtmlFunctionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PutHtmlFunctionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub "arn:aws:s3:::${HtmlBucket}"
                  - !Sub "arn:aws:s3:::${HtmlBucket}/*"
